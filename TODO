1. Work on hashing password when a new user is created

- firstly import = from passlib.context import CryptContext
- then create a CryptContext object = bcrypt_context = CryptContext(schemes=['bcrypt'], deprecated='auto')
- then use the bcrypt_context to hash the password = hashed_password = bcrypt_context.hash(user.password)

THINGS TO LOOK AT

- Look into Docker
- Look into cloud azure ?

NEEDS WORK / TODO

- Maybe start work on Authentication for a User
- Add a new function in the user_crud class to authenticate user.
- Create a Jwt utils for creating token and verifying token.
- Create a auth_dependecies file for handling get_current_user.
- Adjust my routes add a login endpoint. Adjust other endpoints to handle auth. (db_injection - for getting current user)
- Work on making sure notes are clear for anyone that might read this codebase.
- Make a file to keep sensitive info secret for me.

WHERE I LEFT OFF

- I need to remove create a new user from user_crud and create an auth_crud for dealing with this
- then add the authenticate_user into this as well.
- Then the Users Endpoints deal with updating details once logged in
- create auth_crud and auth_routes for dealing with Authentication.
